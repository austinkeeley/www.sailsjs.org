<h1 id="sails-log-">sails.log()</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<p>Each of the methods below accepts an infinite number of arguments of any data type, seperated by commas. Like <code>console.log</code>, data passed as arguments to the Sails logger is automatically prettified for readability using Node&apos;s <a href="http://nodejs.org/api/util.html#util_util_inspect_object_options" target="_blank"><code>util.inspect()</code></a>. Consequently, standard Node.js conventions apply- i.e. if you log an object with an <code>inspect()</code> method, it will be run automatically, and the string that it returns will be written to the console.  Similarly, objects, dates, arrays, and most other data types are pretty-printed using the built-in logic in <code>util.inspect()</code> (e.g. you see <code>{ pet: { name: &apos;Hamlet&apos; } }</code> instead of <code>[object Object]</code>.)</p>
<h3 id="-sails-log-" permalink="sailslog()"><code>sails.log()</code></h3>
<p>The default log function, which writes console output to <code>stderr</code> at the &quot;debug&quot; log level.</p>
<pre><code data-language="javascript">sails.log(&apos;hello&apos;);
// -&gt; debug: hello.
</code></pre><!-- __LANG=%%__ -->
<h3 id="-sails-log-error-" permalink="sailslogerror()"><code>sails.log.error()</code></h3>
<p>Writes log output to <code>stderr</code> at the &quot;error&quot; log level.</p>
<pre><code data-language="javascript">sails.log.error(&apos;Unexpected error occurred.&apos;);
// -&gt; error: Unexpected error occurred.
</code></pre><!-- __LANG=%%__ -->
<h3 id="-sails-log-warn-" permalink="sailslogwarn()"><code>sails.log.warn()</code></h3>
<p>Writes log output to <code>stderr</code> at the &quot;warn&quot; log level.</p>
<pre><code data-language="javascript">sails.log.warn(&apos;File upload quota exceeded for user&apos;,&apos;request aborted.&apos;);
// -&gt; warn: File upload quota exceeded for user- request aborted.
</code></pre><!-- __LANG=%%__ -->
<h3 id="-sails-log-debug-" permalink="sailslogdebug()"><code>sails.log.debug()</code></h3>
<p><em>Alias for <code>sails.log()</code></em></p>
<h3 id="-sails-log-info-" permalink="sailsloginfo()"><code>sails.log.info()</code></h3>
<p>Writes log output to <code>stdout</code> at the &quot;info&quot; log level.</p>
<pre><code data-language="javascript">sails.log.info(&apos;A new user (&apos;, &apos;mike@foobar.com&apos;, &apos;) just signed up!&apos;);
// -&gt; info: A new user ( mike@foobar.com ) just signed up!
</code></pre><!-- __LANG=%%__ -->
<h3 id="-sails-log-verbose-" permalink="sailslogverbose()"><code>sails.log.verbose()</code></h3>
<p>Writes log output to <code>stdout</code> at the &quot;verbose&quot; log level.
Useful for capturing detailed information about your app that you might only want to enable on rare occasions.</p>
<pre><code data-language="javascript">sails.log.verbose(&apos;A user initiated an account transfer...&apos;)
// -&gt; verbose: A user initiated an account transfer...
</code></pre><!-- __LANG=%%__ -->
<h3 id="-sails-log-silly-" permalink="sailslogsilly()"><code>sails.log.silly()</code></h3>
<p>Writes log output to <code>stdout</code> at the &quot;silly&quot; log level.
Useful for capturing utterly ridiculous information about your app you only need on rare occasions.</p>
<pre><code data-language="javascript">sails.log.silly(&apos;A user probably clicked on something..?&apos;);
// -&gt; silly: A user probably clicked on something..?
</code></pre><!-- __LANG=%%__ -->
<docmeta name="displayName" value="sails.log()">

</docmeta>