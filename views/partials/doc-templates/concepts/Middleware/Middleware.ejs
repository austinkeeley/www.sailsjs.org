<h1 id="middleware">Middleware</h1>
<p>Sails is fully compatible with Express / Connect middleware - in fact, it&apos;s all over the place!  Much of the code you&apos;ll write in Sails is effectively middleware; most notably <a href="http://beta.sailsjs.org/#/documentation/concepts/Controllers?q=actions" target="_blank">controller actions</a> and <a href="http://beta.sailsjs.org/#/documentation/concepts/Policies" target="_blank">policies</a>.</p>
<h3 id="http-middleware" permalink="http-middleware">HTTP Middleware</h3>
<p>Sails also utilizes an additional <a href="http://beta.sailsjs.org/#/documentation/concepts/Middleware?q=adding-or-overriding-http-middleware" target="_blank">configurable middleware stack</a> just for handling HTTP requests.  Each time your app receives an HTTP request, the configured HTTP middleware stack runs in order.</p>
<blockquote>
<p>Note that this HTTP middleware stack is only used for &quot;true&quot; HTTP requests-- it is ignored for <strong>virtual requests</strong> (e.g. requests from a live Socket.io connection.)</p>
</blockquote>
<h4 id="conventional-defaults" permalink="conventional-defaults">Conventional Defaults</h4>
<p>Sails comes bundled with a suite of conventional HTTP middleware, ready to use.  You can, of course, disable, override, rearrange, or append to it, but the pre-installed stack is perfectly acceptable for most apps in development or production.  Below is a list of the standard HTTP middleware functions that comes bundled in Sails in the order they execute every time the server receives an incoming HTTP request:</p>
<table>
<thead>
<tr>
<th>HTTP Middleware Key</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td> <strong>startRequestTimer</strong></td>
<td>Allocates a variable in memory to hold the timestamp when the request began.  This can be accessed and used by your app to provide diagnostic information about slow requests.</td>
</tr>
<tr>
<td> <em>cookieParser</em> *</td>
<td>Parses the cookie header into a clean object for use in subsequent middleware and your application code.</td>
</tr>
<tr>
<td> <em>session</em> *</td>
<td>Sets up a unique session object using your <a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.session.html" target="_blank">session configuration</a>.</td>
</tr>
<tr>
<td> <strong>bodyParser</strong></td>
<td>Parses parameters and binary upstreams (for streaming file uploads) from the HTTP request body using <a href="https://github.com/balderdashy/skipper" target="_blank">Skipper</a>.</td>
</tr>
<tr>
<td> <strong>compress</strong></td>
<td>Compresses response data using gzip/deflate.</td>
</tr>
<tr>
<td> <strong>methodOverride</strong></td>
<td>Provides faux HTTP method support, letting you use HTTP verbs such as PUT or DELETE in places where the client doesn&apos;t support it (e.g. legacy versions of Internet Explorer.)  If a request has a <code>_method</code> parameter set to <code>&quot;PUT&quot;</code>, the request will be routed as if it was a proper PUT request.  See <a href="http://www.senchalabs.org/connect/methodOverride.html" target="_blank">Connect&apos;s methodOverride docs</a> for more information if you need it.</td>
</tr>
<tr>
<td> <strong>poweredBy</strong></td>
<td>Attaches an <code>X-Powered-By</code> header to outgoing responses.</td>
</tr>
<tr>
<td> <strong>$custom</strong></td>
<td>Provides backwards compatibility for a configuration option from Sails v0.9.x.  Since Sails v0.10 offers much more configuration flexibility for HTTP middleware, as long as you are not using <code>sails.config.express.customMiddleware</code>, you can confidently remove this item from the list.</td>
</tr>
<tr>
<td> <em>router</em> *</td>
<td>This is where the bulk of your app logic gets applied to any given request.  In addition to running <code>&quot;before&quot;</code> handlers in hooks (e.g. csrf token enforcement) and some internal Sails logic, this routes requests using your app&apos;s explicit routes (in <a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.routes.html" target="_blank"><code>sails.config.routes</code></a>) and/or route blueprints.</td>
</tr>
<tr>
<td> <em>www</em> *</td>
<td>Serves static files- usually images, stylesheets, scripts- in your app&apos;s &quot;public&quot; folder (configured in <a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md" target="_blank"><code>sails.config.paths</code></a>, conventionally <a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md" target="_blank"><code>.tmp/public/</code></a>) using Connect&apos;s <a href="http://www.senchalabs.org/connect/static.html" target="_blank">static middleware</a>.</td>
</tr>
<tr>
<td> <strong>favicon</strong></td>
<td>Serves the <a href="http://en.wikipedia.org/wiki/Favicon" target="_blank">browser favicon</a> for your app if one is provided as <code>/assets/favicon.ico</code>.</td>
</tr>
<tr>
<td> <em>404</em> *</td>
<td>Handles requests which do not match any routes - triggers <code>res.notFound()</code>  <!-- technically, this emits the `router:request:404` event)  --></td>
</tr>
<tr>
<td> <em>500</em> *</td>
<td>Handles requests which trigger an internal error (i.e. call Express&apos;s <code>next(err)</code>)  - triggers <code>res.serverError()</code> <!-- technically, this emits the `router:request:500` event)  --></td>
</tr>
</tbody>
</table>
<h6 id="legend-">Legend:</h6>
<ul>
<li><code>*</code> - The middleware with an asterisk (*) above should <em>almost never</em> need to be modified or removed. Please only do so if you really understand what you&apos;re doing.</li>
</ul>
<h4 id="adding-or-overriding-http-middleware" permalink="adding-or-overriding-http-middleware">Adding or Overriding HTTP Middleware</h4>
<p>To configure a custom HTTP middleware function, define a new HTTP key <code>sails.config.http.middleware.FOO</code> and set it to the configured middleware function, then add the string name (&quot;FOO&quot;) to your <code>sails.config.http.middleware.order</code> array wherever you&apos;d like it to run in the middleware chain (a good place to put it might be right before &quot;cookieParser&quot;):</p>
<p>E.g. in <code>config/http.js</code>:</p>
<pre><code data-language="javascript">// ...
  middleware: {

    // Define a custom HTTP middleware fn with the key `foobar`:
    foobar: function (req,res,next) { /*...*/ next(); },

    // Define another couple of custom HTTP middleware fns with keys `passportInit` and `passportSession`
    // (notice that this time we&apos;re using an existing middleware library from npm)
    passportInit    : require(&apos;passport&apos;).initialize(),
    passportSession : require(&apos;passport&apos;).session(),

    // Override the conventional cookie parser:
    cookieParser: function (req, res, next) { /*...*/ next(); },


    // Now configure the order/arrangement of our HTTP middleware
    order: [
      &apos;startRequestTimer&apos;,
      &apos;cookieParser&apos;,
      &apos;session&apos;,
      &apos;passportInit&apos;,            // &lt;==== passport HTTP middleware should run after &quot;session&quot;
      &apos;passportSession&apos;,         // &lt;==== (see https://github.com/jaredhanson/passport#middleware)
      &apos;bodyParser&apos;,
      &apos;compress&apos;,
      &apos;foobar&apos;,                  // &lt;==== we can put this stuff wherever we want
      &apos;methodOverride&apos;,
      &apos;poweredBy&apos;,
      &apos;$custom&apos;,
      &apos;router&apos;,
      &apos;www&apos;,
      &apos;favicon&apos;,
      &apos;404&apos;,
      &apos;500&apos;
    ]
  },

  customMiddleware: function(app){
     //Intended for other middleware that doesn&apos;t follow &apos;app.use(middleware)&apos; convention
     require(&apos;other-middleware&apos;).initialize(app);
  }
  // ...
</code></pre><!-- __LANG=%%__ -->
<h3 id="express-middleware-in-sails" permalink="express-middleware-in-sails">Express Middleware In Sails</h3>
<p>One of the really nice things about Sails apps is that they can take advantage of the wealth of already-existing Express/Connect middleware out there.  But a common question that arises when people <em>actually</em> try to do this is:</p>
<blockquote>
<p><em>&quot;Where do I <code>app.use()</code> this thing?&quot;</em>.</p>
</blockquote>
<p>In most cases, the answer is to install the Express middleware as a custom HTTP middleware in <a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.http.html" target="_blank"><code>sails.config.http.middleware</code></a>.  This will trigger it for ALL HTTP requests to your Sails app, and allow you to configure the order in which it runs in relation to other HTTP middleware.</p>
<h3 id="express-routing-middleware-in-sails" permalink="express-routing-middleware-in-sails">Express Routing Middleware In Sails</h3>
<p>You can also include Express middleware as a policy- just configure it in <a href="http://beta.sailsjs.org/#/documentation/reference/sails.config/sails.config.policies.html" target="_blank"><code>config/policies.js</code></a>.  You can either require and setup the middleware in an actual wrapper policy (usually a good idea) or just require it directly in your policies.js file.  The following example uses the latter strategy for brevity:</p>
<pre><code data-language="javascript">{
  &apos;*&apos;: true,

  ProductController: {

    // Prevent end users from doing CRUD operations on products reserved for admins
    // (uses HTTP basic auth)
    &apos;*&apos;: require(&apos;http-auth&apos;)({
      realm: &apos;admin area&apos;
    }, function customAuthMethod (username, password, onwards) {
      return onwards(username === &quot;Tina&quot; &amp;&amp; password === &quot;Bullock&quot;);
    }),

    // Everyone can view product pages
    show: true
  }
}
</code></pre><!-- __LANG=%%__ -->
<!--

  TODO:

### Advanced Express Middleware In Sails

You can actually do this in a few different ways, depending on your needs.



Generally, the following best-practices apply:

If you want a middleware function 

+ If you want a piece of middleware to run only when your app's explicit or blueprint routes are matched, you should include it as a policy.
+ this will run passport for all incoming http requests, including images, css, etc.

If you want a middleware function to run for all you should include it at the top of your `config/routes.js` as a wildcard route.  for your controller (both HTTP and virtual) requests
-->
<p><docmeta name="uniqueID" value="middleware198259"></docmeta></p>
<docmeta name="displayName" value="Middleware">
</docmeta>