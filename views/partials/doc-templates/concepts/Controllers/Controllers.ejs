<h1 id="controllers">Controllers</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<p>Controllers (the <strong>C</strong> in <strong>MVC</strong>) are the principle objects in your Sails application that are responsible for responding to <em>requests</em> from a web browser, mobile application or any other system capable of communicating with a server.  They often act as a middleman between your <a href="http://sailsjs.org/#!/documentation/concepts/ORM/Models.html" target="_blank">models</a> and <a href="http://sailsjs.org/#!/documentation/concepts/Views" target="_blank">views</a>. For many applications, the controllers will contain the bulk of your project&#x2019;s <a href="http://en.wikipedia.org/wiki/Business_logic" target="_blank">business logic</a>.</p>
<h3 id="actions" permalink="actions">Actions</h3>
<p>Controllers are comprised of a collection of methods called <em>actions</em>.  Action methods can be bound to <a href="http://sailsjs.org/#!/documentation/concepts/Routes" target="_blank">routes</a> in your application so that when a client requests the route, the bound method is executed to perform some business logic and (in most cases) generate a response.  For example, the <code>GET /hello</code> route in your application could be bound to a method like:</p>
<pre><code data-language="javascript">function (req, res) {
  return res.send(&quot;Hi there!&quot;);
}
</code></pre><!-- __LANG=%%__ -->
<p>so that any time a web browser is pointed to the <code>/hello</code> URL on your app&apos;s server, the page displays the message &#x201C;Hi there&#x201D;.</p>
<h3 id="where-are-controllers-defined-" permalink="where-are-controllers-defined">Where are Controllers defined?</h3>
<p>Controllers are defined in the <code>api/controllers/</code> folder. You can put any files you like in that folder, but in order for them to be loaded by Sails as controllers, a file must <em>end</em> in <code>Controller.js</code>.  By convention, Sails controllers are usually <a href="http://c2.com/cgi/wiki?PascalCase" target="_blank"><em>Pascal-cased</em></a>, so that every word in the filename (including the first word) is capitalized: for example, <code>UserController.js</code>, <code>MyController.js</code> and <code>SomeGreatBigController.js</code> are all valid, Pascal-cased names.</p>
<p>You may organize your controllers into groups by saving them in subfolders of <code>api/controllers</code>, however note that the subfolder name <em>will become part of the Controller&#x2019;s identity</em> when used for routing (more on that in the &quot;Routing&quot; section below).</p>
<h3 id="what-does-a-controller-file-look-like-" permalink="what-does-a-controller-file-look-like">What does a Controller file look like?</h3>
<p>A controller file defines a Javascript object whose keys are action names, and whose values are the corresponding action methods.  Here&#x2019;s a simple example of a full controller file:</p>
<pre><code data-language="javascript">module.exports = {
  hi: function (req, res) {
    return res.send(&quot;Hi there!&quot;);
  },
  bye: function (req, res) {
    return res.redirect(&quot;http://www.sayonara.com&quot;);
  }
};
</code></pre><!-- __LANG=%%__ -->
<p>This controller defines two actions: the &#x201C;hi&#x201D; responds to a request with a string message, while the &#x201C;bye&#x201D; action responds by redirecting to another web site.  The <code>req</code> and <code>res</code> objects will be familiar to anyone who has used <a href="https://github.com/expressjs" target="_blank">Express.js</a> to write a web application.  This is by design, as Sails uses Express under the hood to handle routing.  Take special note, however, of the lack of a <code>next</code> argument for the actions.  Unlike Express  middleware methods, Sails controller actions should always be the last stop in the request chain--that is, they should always result in either a response or an error.  While it is possible to use <code>next</code> in an action method, you are strongly encouraged to use <a href="http://sailsjs.org/#!/documentation/concepts/Policies" target="_blank">policies</a> instead wherever possible.</p>
<h3 id="routing" permalink="routing">Routing</h3>
<p>By default, Sails will create a <a href="http://sailsjs.org/#!/documentation/reference/blueprint-api" target="_blank">blueprint action route</a> for each action in a controller, so that a <code>GET</code> request to <code>/:controllerIdentity/:nameOfAction</code> will trigger the action.  If the example controller in the previous section was saved as <code>api/controllers/SayController.js</code>, then the <code>/say/hi</code> and <code>/say/bye</code> routes would be made available by default whenever the app was lifted.  If the controller was saved under the subfolder <code>/we</code>, then the routes would be <code>/we/say/hi</code> and <code>/we/say/bye</code>.  See the <a href="http://sailsjs.org/#!/documentation/reference/blueprint-api" target="_blank">blueprints documentation</a> for more information about Sails&#x2019; automatic route binding.</p>
<p>Besides the default routing, Sails allows you to manually bind routes to controller actions using the <a href="http://sailsjs.org/#!/documentation/concepts/Routess" target="_blank"><code>config/routes.js</code></a> file.  Some examples of when you might want to use explicit routes are:</p>
<ul>
<li>When you want to use separate actions to handle the same route path, based on the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank">HTTP method</a> (aka verb).  The aforementioned <strong>action blueprint</strong> routes bind <em>all</em> request methods for a path to a given action, including <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, etc.</li>
<li>When you want an action to be available at a custom URL (e.g. <code>PUT /login</code>, <code>POST /signup</code>, or a &quot;vanity URL&quot; like <code>GET /:username</code>)</li>
<li>When you want to set up additional options for how the route should be handled (e.g. special CORS configuration)</li>
</ul>
<p>To manually bind a route to a controller action in the <code>config/routes.js</code> file, you can use the HTTP verb and path (i.e. the <strong>route address</strong>) as the key, and the controller name + <code>.</code> + action name as the value (i.e. the <strong>route target</strong>).</p>
<p>For example, the following manual route will cause your app to trigger the <code>makeIt()</code> action in <code>api/controllers/SandwichController.js</code> whenever it receives a POST request to <code>/make/a/sandwich</code>:</p>
<pre><code data-language="javascript">&apos;POST /make/a/sandwich&apos;: &apos;SandwichController.makeIt&apos;
</code></pre><!-- __LANG=%%__ -->
<blockquote>
<p><strong>Note:</strong></p>
<p>For controller files saved in subfolders, the subfolder is part of the controller identity:</p>
<pre><code data-language="javascript">&apos;/do/homework&apos;: &apos;stuff/things/HomeworkController.do&apos;
</code></pre><!-- __LANG=%%__ -->
<p>This will cause the <code>do()</code> action in <code>api/controllers/stuff/things/HomeworkController.js</code> to be triggered whenever <code>/do/homework</code> is requested.</p>
</blockquote>
<p>A full discussion of manual routing is out of the scope of this doc--please see the <a href="http://sailsjs.org/#!/documentation/concepts/Routes" target="_blank">routes documentation</a> for a full overview of the available options.</p>
<h3 id="-thin-controllers" permalink="thin-controllers">&quot;Thin&quot; Controllers</h3>
<p>Most MVC frameworks recommend writing &quot;thin&quot; controllers, and while Sails is no exception (it is a good idea to keep your Sails controllers as simple as possible) it is also helpful to understand &quot;why?&quot;</p>
<p>Controller code is inherently dependent on some sort of trigger or event.  In a backend framework like Sails, this event is almost always an incoming request.  So if you write a bunch of code in one of your controller actions, it is not uncommon for that code&apos;s scope to be dependent on the &quot;request context&quot; (the <code>req</code> and <code>res</code> objects).  Which is fine...until you want to use that code from a slightly different action, or from the command line.</p>
<p>So the goal of the &quot;thin controller&quot; philosophy is to encourage decoupling of reusable code from any related scope entanglements.  In Sails, you can achieve this in a number of different ways, but the most common strategies for extrapolating code from controllers are:</p>
<ul>
<li>Write a custom model method to encapsulate some code that performs a particular task relating to a particular model</li>
<li>Write a service as a function to encapsulate some code that performs a particular application-specific task</li>
<li>If you find some code which is useful across multiple different applications (and you have time to do this), you should extract it into a node module.  Then you can share it across your organization, use it in future projects, or better yet, <a href="">publish it on npm</a> under a permissive open-source license for other developers to use and help maintain.</li>
</ul>
<h3 id="generating-controllers" permalink="generating-controllers">Generating controllers</h3>
<p>You can use the <a href="http://sailsjs.org/#!/documentation/reference/cli" target="_blank">Sails command line tool</a> to quickly generate a controller, by typing:</p>
<pre><code data-language="javascript">$ sails generate controller &lt;controller name&gt; [action names separated by spaces...]
</code></pre><!-- __LANG=%%__ -->
<p>For example, if you run the following command:</p>
<pre><code data-language="javascript">$ sails generate controller comment create destroy tag like
info: Generated a new controller `comment` at api/controllers/CommentController.js!
</code></pre><!-- __LANG=%%__ -->
<p>Sails will generate <code>api/controllers/CommentController.js</code>:</p>
<pre><code data-language="javascript">/**
 * CommentController.js
 *
 * @description :: Server-side logic for managing comments.
 */

module.exports = {

  /**
   * CommentController.create()
   */
  create: function (req, res) {
    return res.json({
      todo: &apos;Not implemented yet!&apos;
    });
  },

  /**
   * CommentController.destroy()
   */
  destroy: function (req, res) {
    return res.json({
      todo: &apos;Not implemented yet!&apos;
    });
  },

  /**
   * CommentController.tag()
   */
  tag: function (req, res) {
    return res.json({
      todo: &apos;Not implemented yet!&apos;
    });
  },

  /**
   * CommentController.like()
   */
  like: function (req, res) {
    return res.json({
      todo: &apos;Not implemented yet!&apos;
    });
  }
};
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="uniqueID" value="Controllers464694"></docmeta></p>
<docmeta name="displayName" value="Controllers">

</docmeta>