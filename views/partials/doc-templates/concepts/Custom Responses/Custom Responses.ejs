<h1 id="custom-responses">Custom Responses</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<p>Sails v.10 allows for customizable server responses.  Sails comes with a handful of the most common response types by default.  They can be found in the <code>/api/responses</code> directory of your project.  To customize these, simply edit the appropriate .js file. </p>
<p>As a quick example, consider the following controller action:</p>
<pre><code data-language="javascript">foo: function(req, res) {
   if (!req.param(&apos;id&apos;)) {
     res.status(400);
     res.view(&apos;400&apos;, {message: &apos;Sorry, you need to tell us the ID of the FOO you want!&apos;});
   }
   ...
}
</code></pre><!-- __LANG=%%__ -->
<p>This code handles a bad request by sending a 400 error status and a short message describing the problem.  However, this code has several drawbacks, primarily:</p>
<ul>
<li>It isn&apos;t <em>normalized</em>; the code is specific to this instance, and we&apos;d have to work hard to keep the same format everywhere</li>
<li>It isn&apos;t <em>abstracted</em>; if we wanted to use a similar approach elsewhere, we&apos;d have to copy / paste the code</li>
<li>The response isn&apos;t <em>content-negotiated</em>; if the client is expecting a JSON response, they&apos;re out of luck</li>
</ul>
<p>Now, consider this replacement:</p>
<pre><code data-language="javascript">foo: function(req, res) {
   if (!req.param(&apos;id&apos;)) {
     res.badRequest(&apos;Sorry, you need to tell us the ID of the FOO you want!&apos;);
   }
   ...
}
</code></pre><!-- __LANG=%%__ -->
<p>This approach has many advantages:</p>
<ul>
<li>Error payloads are normalized</li>
<li>Production vs. Development logging is taken into account</li>
<li>Error codes are consistent</li>
<li>Content negotiation (JSON vs HTML) is taken care of</li>
<li>API tweaks can be done in one quick edit to the appropriate generic response file</li>
</ul>
<h3 id="responses-methods-and-files" permalink="responses-methods-and-files">Responses methods and files</h3>
<p>Any <code>.js</code> script saved in the <code>/api/responses</code> folder will be executed by calling <code>res.[responseName]</code> in your controller.  For example, <code>/api/responses/serverError.js</code> can be executed with a call to <code>res.serverError(errors)</code>.  The request and response objects are available inside the response script as <code>this.req</code> and <code>this.res</code>; this allows the actual response function to take arbitrary parameters (like <code>serverError</code>&apos;s <code>errors</code> parameter).</p>
<h3 id="default-responses" permalink="default-responses">Default responses</h3>
<p>The following responses are bundled with all new Sails apps inside the <code>/api/responses</code> folder.  Each one sends a normalized JSON object if the client is expecting JSON, containing a <code>status</code> key with the HTTP status code, and additional keys with relevant information about any errors.</p>
<h4 id="res-servererror-errors-" permalink="resservererror(errors)">res.serverError(errors)</h4>
<p>This response normalizes the error/errors of {errors} into an array of proper, readable <code>Error</code> objects. <code>errors</code> can be one or more strings or <code>Error</code> objects.  It then logs all Errors to the Sails logger (usually the console), and responds with the <code>views/500.*</code> view file if the client is expecting HTML, or a JSON object if the client is expecting JSON.  In development mode, the list of errors is included in the response.  In production mode, the actual errors are suppressed.</p>
<h4 id="res-badrequest-validationerrors-redirectto-" permalink="resbadrequest(validationerrors,-redirectto)">res.badRequest(validationErrors, redirectTo)</h4>
<p>For requesters expecting JSON, this response includes the 400 status code and any relevant data sent as <code>validationErrors</code>.</p>
<p>For traditional (not-AJAX) web forms, this middleware follows best-practices for when a user submits invalid form data:</p>
<ul>
<li>First, a one-time-use flash variable is populated, probably a string message or an array of semantic validation error objects.</li>
<li>Then the  user is redirected back to <code>redirectTo</code>, i.e. the URL where the bad request originated.</li>
<li>There, the controller and/or view might use the flash <code>errors</code> to either display a message or highlight the invalid HTML form fields.</li>
</ul>
<h4 id="res-notfound-" permalink="resnotfound()">res.notFound()</h4>
<p>If the requester is expecting JSON, this response simply sends a 404 status code and a <code>{status: 404}</code> object. </p>
<p>Otherwise the view located in <code>myApp/views/404.*</code> will be served.  If that view can&apos;t be found, then the client is just sent the JSON response.</p>
<h4 id="res-forbidden-message-" permalink="resforbidden(message)">res.forbidden(message)</h4>
<p>If the requester is expecting JSON, this response sends the 403 status code along with the contents of <code>message</code>.</p>
<p>Otherwise the view located in <code>myApp/views/403.*</code> will be served.  If that view can&apos;t be found, then the client is just sent the JSON response.</p>
<h3 id="custom-response" permalink="custom-response">Custom Response</h3>
<p>To add your own custom response method, simply add a file to <code>/api/responses</code> with the same name as the method you would like to create.  The file should export a function, which can take any parameters you like.</p>
<pre><code data-language="javascript">/** 
 * api/responses/myResponse.js
 *
 * This will be available in controllers as res.myResponse(&apos;foo&apos;);
 */

module.exports = function(message) {

  var req = this.req;
  var res = this.res;

  var viewFilePath = &apos;mySpecialView&apos;;
  var statusCode = 200;

  var result = {
    status: statusCode
  };

  // Optional message
  if (message) {
    result.message = message;
  }

  // If the user-agent wants a JSON response, send json
  if (req.wantsJSON) {
    return res.json(result, result.status);
  }

  // Set status code and view locals
  res.status(result.status);
  for (var key in result) {
    res.locals[key] = result[key];
  }
  // And render view
  res.render(viewFilePath, result, function(err) {
    // If the view doesn&apos;t exist, or an error occured, send json
    if (err) {
      return res.json(result, result.status);
    }

    // Otherwise, serve the `views/mySpecialView.*` page
    res.render(viewFilePath);
  });
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="uniqueID" value="CustomResponses867259"></docmeta></p>
<docmeta name="displayName" value="Custom Responses">

</docmeta>