<h1 id="testing-your-code">Testing your code</h1>
<h2 id="preparation" permalink="preparation">Preparation</h2>
<p>For our test suite, we use <a href="http://mochajs.org/" target="_blank">mocha</a>.
Before you start building your test cases, you should first organise your <code>./test</code> directory structure, for example in the following way:</p>
<pre><code data-language="batch">./myApp
&#x251C;&#x2500;&#x2500; api
&#x251C;&#x2500;&#x2500; assets
&#x251C;&#x2500;&#x2500; ...
&#x251C;&#x2500;&#x2500; test
&#x2502;  &#x251C;&#x2500;&#x2500; unit
&#x2502;  &#x2502;  &#x251C;&#x2500;&#x2500; controllers
&#x2502;  &#x2502;  &#x2502;  &#x2514;&#x2500;&#x2500; UsersController.test.js
&#x2502;  &#x2502;  &#x251C;&#x2500;&#x2500; models
&#x2502;  &#x2502;  &#x2502;  &#x2514;&#x2500;&#x2500; Users.test.js
&#x2502;  &#x2502;  &#x2514;&#x2500;&#x2500; ...
&#x2502;  &#x251C;&#x2500;&#x2500; fixtures
&#x2502;  &#x251C;&#x2500;&#x2500; ...
&#x2502;  &#x251C;&#x2500;&#x2500; bootstrap.test.js
&#x2502;  &#x2514;&#x2500;&#x2500; mocha.opts
&#x2514;&#x2500;&#x2500; views
</code></pre><!-- __LANG=%%__ -->
<h3 id="bootstrap-test-js" permalink="bootstraptestjs">bootstrap.test.js</h3>
<p>This file is useful when you want to execute some code before and after running your tests(e.g. lifting and lowering your sails application). Since your models are converted to waterline collections on lift, it is necessary to lift your sailsApp before trying to test them (This applies similarly to controllers and other parts of your app, so be sure to call this file first).</p>
<pre><code data-language="javascript">var Sails = require(&apos;sails&apos;),
  sails;

before(function(done) {
  Sails.lift({
    // configuration for testing purposes
  }, function(err, server) {
    sails = server;
    if (err) return done(err);
    // here you can load fixtures, etc.
    done(err, sails);
  });
});

after(function(done) {
  // here you can clear fixtures, etc.
  sails.lower(done);
});
</code></pre><!-- __LANG=%%__ -->
<h3 id="mocha-opts" permalink="mochaopts">mocha.opts</h3>
<p>This file should contain mocha configuration as described here: <a href="http://mochajs.org/#mocha.opts" target="_blank">mocha.opts</a></p>
<p><strong>Note</strong>: If you are writing your test in CoffeeScript be sure to add this lines to your mocha.opts</p>
<pre><code data-language="javascript">--require coffee-script/register
--compilers coffee:coffee-script/register
</code></pre><!-- __LANG=%%__ -->
<h2 id="writing-tests" permalink="writing-tests">Writing tests</h2>
<p>Once you have prepared your directory you can start writing your unit tests.</p>
<p>./test/unit/models/Users.test.js</p>
<pre><code data-language="javascript">describe.only(&apos;UsersModel&apos;, function() {

  describe(&apos;#find()&apos;, function() {
    it(&apos;should check find function&apos;, function (done) {
      Users.find()
        .then(function(results) {
          // some tests
          done();
        })
        .catch(done);
    });
  });

});
</code></pre><!-- __LANG=%%__ -->
<h4 id="testing-controllers" permalink="testing-controllers">Testing controllers</h4>
<p>To test controller responses you can use <a href="https://github.com/visionmedia/supertest" target="_blank">Supertest</a> library which provides several useful methods for testing HTTP requests.</p>
<p>./test/unit/controllers/UsersController.test.js</p>
<pre><code data-language="javascript">var request = require(&apos;supertest&apos;);

describe(&apos;UsersController&apos;, function() {

  describe(&apos;#login()&apos;, function() {
    it(&apos;should redirect to /mypage&apos;, function (done) {
      request(sails.hooks.http.app)
        .post(&apos;/users/login&apos;)
        .send({ name: &apos;test&apos;, password: &apos;test&apos; })
        .expect(302)
        .expect(&apos;location&apos;,&apos;/mypage&apos;, done);
    });
  });

});
</code></pre><!-- __LANG=%%__ -->
<h2 id="running-tests" permalink="running-tests">Running tests</h2>
<p>In order to run your test using mocha, you&apos;ll have to use <code>mocha</code> in the command line and then pass as arguments any test you want to run, be sure to call bootstrap.test.js before the rest of your tests like this <code>mocha test/bootstrap.test.js test/unit/**/*.test.js</code></p>
<h4 id="using-npm-test-to-run-your-test" permalink="using-npm-test-to-run-your-test">Using <code>npm test</code> to run your test</h4>
<p>To avoid typing the mocha command, like stated before (specially when calling bootstrap.test.js) and using <code>npm test</code> instead, you&apos;ll need to modify your package.json. On the scripts obj, add a <code>test</code> key and type this as its value <code>mocha test/bootstrap.test.js test/unit/**/*.test.js</code> like this:</p>
<pre><code data-language="javascript">// package.json
 scripts&quot;: {
    &quot;start&quot;: &quot;node app.js&quot;,
    &quot;debug&quot;: &quot;node debug app.js&quot;,
    &quot;test&quot;: &quot;mocha test/bootstrap.test.js test/unit/**/*.test.js&quot;
  },
 // More config
</code></pre><!-- __LANG=%%__ -->
<p>The <code>*</code> is a wildcard used to match any file inside the <code>unit</code> folder that ends in <code>.test.js</code> so if it suits you, you can perfectly modify it to search for <code>*.spec.js</code> instead. In the same way you can use wildcards for your folders by using two <code>*</code> instead of one.</p>
<h2 id="code-coverage" permalink="code-coverage">Code coverage</h2>
<p>Another popular method for testing your code is <a href="http://en.wikipedia.org/wiki/Code_coverage" target="_blank">Code Coverage</a>.</p>
<p>You can use <a href="http://mochajs.org/" target="_blank">mocha</a> and <a href="https://github.com/gotwarlost/istanbul" target="_blank">istanbul</a> to check your code and prepare various coverage reports (HTML, Cobertura) which can be used in continuous integration services such as <a href="http://jenkins-ci.org" target="_blank">Jenkins</a>.</p>
<p>To test your code and prepare a simple HTML report run the following commands:</p>
<pre><code data-language="javascript">istanbul cover -x &quot;**/config/**&quot; _mocha -- --timeout 5000
istanbul report html
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="uniqueID" value="Testing765149"></docmeta></p>
<docmeta name="displayName" value="Testing">
</docmeta>