<h1 id="sails-config-session">sails.config.session</h1>
<h3 id="what-is-this-" permalink="what-is-this">What is this?</h3>
<p>Sails session integration leans heavily on the great work already done by Express, but also unifies Socket.io with the Connect session store.</p>
<h3 id="description" permalink="description">Description</h3>
<p>Sails session integration leans heavily on the great work already done by Express, but also unifies 
Socket.io with the Connect session store. It uses Connect&#x2019;s cookie parser to normalize configuration
differences between Express and Socket.io and hooks into Sails&#x2019; middleware interpreter to allow you
to access and auto-save to <code>req.session</code> with Socket.io the same way you would with Express.</p>
<h4 id="-secret-" permalink="secret"><code>secret</code></h4>
<p>Session secret is automatically generated when your new app is created.
Replace at your own risk in production-- you will invalidate the cookies of your users, forcing them to log in again. </p>
<h3 id="-key-" permalink="key"><code>key</code></h3>
<p>Session key is set as <code>sails.sid</code> by default.
This is the name used in the cookie to recover the session.</p>
<p>If you are runing multiple instances of sails, you can lost your session with Websocket.
Replace key by an unique name, solve this issue.</p>
<h4 id="shared-redis-session-store" permalink="shared-redis-session-store">Shared Redis session store</h4>
<p>In production, uncomment the following line to set up a shared redis session store
that can be shared across multiple Sails.js servers.</p>
<pre><code data-language="javascript">adapter: &apos;redis&apos;,
</code></pre><!-- __LANG=%%__ -->
<p>The following values are optional, if no options are set a redis instance running
on localhost is expected.
Read more about options at: <a href="https://github.com/visionmedia/connect-redis" target="_blank">https://github.com/visionmedia/connect-redis</a></p>
<pre><code data-language="javascript">host: &apos;localhost&apos;,
        port: 6379,
        ttl: &lt;redis session TTL in seconds&gt;,
        db: 0,
        pass: &lt;redis auth password&gt;
        prefix: &apos;sess:&apos;
</code></pre><!-- __LANG=%%__ -->
<p>Uncomment the following lines to use your Mongo adapter as a session store</p>
<pre><code data-language="javascript">adapter: &apos;mongo&apos;,

        host: &apos;localhost&apos;,
        port: 27017,
        db: &apos;sails&apos;,
        collection: &apos;sessions&apos;,
</code></pre><!-- __LANG=%%__ -->
<p>Optional Values:</p>
<pre><code data-language="javascript">// Note: url will override other connection settings
        // url: &apos;mongodb://user:pass@host:port/database/collection&apos;,

        username: &apos;&apos;,
        password: &apos;&apos;,
        auto_reconnect: false,
        ssl: false,
        stringify: true
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="uniqueID" value="sailsconfigsession786744"></docmeta></p>
<docmeta name="displayName" value="sails.config.session">

</docmeta>