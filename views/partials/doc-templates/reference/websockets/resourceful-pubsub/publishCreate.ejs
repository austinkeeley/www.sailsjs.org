<h1 id="-publishcreate-data-request-">.publishCreate( <code>data</code>,[<code>request</code>] )</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>PublishCreate doesn&apos;t actually create anything.  It simply publishes information about the creation of a model instance via websockets.  PublishCreate is called automatically by the <a href="https://github.com/balderdashy/sails-docs/blob/0.10/reference/Blueprints.md#create-a-record" target="_blank">blueprint <code>create</code> action</a>.</p>
<table>
<thead>
<tr>
<th></th>
<th>Description</th>
<th>Accepted Data Types</th>
<th>Required ?</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Data to Send</td>
<td><code>object</code></td>
<td>Yes</td>
</tr>
<tr>
<td>2</td>
<td>Request</td>
<td><code>Request object</code></td>
<td>No</td>
</tr>
</tbody>
</table>
<p>The default implementation of publishCreate only publishes messages to the firehose, and to sockets subscribed to the model class using the <code>watch</code> method.  It also subscribes all sockets &quot;watching&quot; the model class to the new instance.  The socket message to subscribers will include the following properties:</p>
<ul>
<li><strong>id</strong> - the <code>id</code> attribute of the new model instance</li>
<li><strong>verb</strong>  - <code>&quot;created&quot;</code> (a string)</li>
<li><strong>data</strong> - an object-- the attributes and values of the new model instance</li>
</ul>
<h4 id="-data-" permalink="data"><code>data</code></h4>
<p>An object containing the attributes and values of the new model instance.</p>
<h4 id="-request-" permalink="request"><code>request</code></h4>
<p>If this argument is included then the socket attached to that request will <em>not</em> receive the notification.</p>
<h3 id="example-usage" permalink="example-usage">Example Usage</h3>
<p>UsersController.js</p>
<pre><code data-language="javascript">module.exports = {

  testSocket: function(req,res){

        var nameSent = req.param(&apos;name&apos;);

        if (nameSent &amp;&amp; req.isSocket){

          User.create({name:nameSent}).exec(function created(err,newGuy){
            User.publishCreate({id:newGuy.id,name:newGuy.name});
            console.log(&apos;A new user called &apos;+newGuy.name+&apos; has been created&apos;);
          });

        } else if (req.isSocket){

          User.watch(req);
          console.log(&apos;User with socket id &apos;+sails.sockets.id(req)+&apos; is now subscribed to the model class \&apos;users\&apos;.&apos;);

        } else {

          res.view();

        }
    }
}

    // Don&apos;t forget to handle your errors
</code></pre><!-- __LANG=%%__ -->
<p>views/users/testSocket.ejs</p>
<pre><code data-language="html">&lt;script type=&quot;text/javascript&quot;&gt;
window.onload = function subscribeAndListen(){
    // When the document loads, send a request to users.testSocket
    // The controller code will subscribe you to the model &apos;users&apos;
    socket.get(&apos;/users/testSocket/&apos;);

    // Listen for the event called &apos;user&apos; emited by the publishCreate() method.
    socket.on(&apos;user&apos;,function(obj){
      if (obj.verb == &apos;created&apos;) {
         var data = obj.data;
         console.log(&apos;User &apos;+data.name+&apos; has been created.&apos;);
      }
    });
};

function makeNew(){

    // Send the new users name to the &apos;testSocket&apos; action on the &apos;users&apos; controller

    socket.get(&apos;/users/testSocket/&apos;,{name:&apos;Walter&apos;});
}

&lt;/script&gt;
&lt;div class=&quot;addButton&quot; onClick=&quot;makeNew()&quot;&gt;Click Me to add a new &apos;Walter&apos; ! &lt;/div&gt;
</code></pre><!-- __LANG=%%__ -->
<p><docmeta name="methodType" value="pubsub"></docmeta></p>
<p><docmeta name="importance" value="undefined"></docmeta></p>
<docmeta name="displayName" value=".publishCreate()">

</docmeta>