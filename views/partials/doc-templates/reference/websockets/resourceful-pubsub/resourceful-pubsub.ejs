<h1 id="resourceful-pubsub">Resourceful PubSub</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<p>For apps that rely heavily on real-time client-server communication--for example, peer-to-peer chat and social networking apps--sending and listening for socket events can quickly become overwhelming.  Sails helps smooth away some of this complexity by introducing the concept of Resourceful PubSub (<a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern" target="_blank">Publish / Subscribe</a>).  Every model (AKA <em>resource</em>) in your app is automatically equipped with class methods for subscribing sockets to notifications about instance creations, updates and deletions.  If you&#x2019;re using the <a href="http://sailsjs.org/documentation/reference/blueprint-api" target="_blank">Blueprint API</a>, socket messages are automatically broadcast to subscribed sockets when a model event occurs.  If not, you can use the methods described in this section to manually communicate model events to clients.</p>
<h3 id="listening-for-events-on-the-client" permalink="listening-for-events-on-the-client">Listening for events on the client</h3>
<p>While you are free to use any Javascript library to listen for socket events on the client, Sails does provide its own <a href="http://sailsjs.org/documentation/reference/websockets/sails.io.js" target="_blank">Socket Client</a> as a convenient way to communicate with the server.  Using the Sails socket client makes listening for resourceful pubsub events as easy as:</p>
<pre><code data-language="javascript">io.socket.on(&quot;&lt;model identity&gt;&quot;, listenerFunction)
</code></pre><!-- __LANG=%%__ -->
<blockquote>
<p>The <em>model identity</em> is typically the lowercased version of the model name, unless it has been manually configured in the model file.</p>
</blockquote>
<h3 id="example" permalink="example">Example</h3>
<p>Let&#x2019;s say you have a model named <code>User</code> in your app, with a single &#x201C;name&#x201D; attribute.  First, we&#x2019;ll add a listener for &#x201C;user&#x201D; events:</p>
<pre><code data-language="javascript">io.socket.on(&quot;user&quot;, function(event){console.log(event);})
</code></pre><!-- __LANG=%%__ -->
<p>This will log any notifications about <code>User</code> models to the console.  However, we won&#x2019;t receive any such messages until we <em>subscribe</em> to the existing <code>User</code> model instances.  If you&#x2019;re using the default blueprints, you can subscribe by making a socket request from the client to <code>/user</code>:</p>
<pre><code data-language="javascript">io.socket.get(&quot;/user&quot;, function(resData, jwres) {console.log(resData);})
</code></pre><!-- __LANG=%%__ -->
<p>This requests the current list of users from the Sails server, and subscribes the client to events about each user.  Additionally, if the <a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.blueprints.html?q=properties" target="_blank"><code>autoWatch</code> setting</a> is on (the default), the client will also be notified whenever a new <code>User</code> is created, and will automatically be subscribed to the new user.  The callback in this example simply logs the user list to the console.  See the <a href="http://sailsjs.org/documentation/reference/websockets/sails.io.js/socket.get.html" target="_blank">socket.get</a> reference for more info about this method.</p>
<p>It&#x2019;s important to note that in order for the subscription to take place, the <code>/user</code> request must be made via a websocket call, <em>not</em> a regular HTTP request.  That is, using an AJAX request (e.g. <code>jQuery.get(&quot;/user&quot;)</code>) will <em>not</em> result in the client being subscribed to resourceful pubsub messages about <code>User</code>.  However, once the subscription is made, <em>any</em> changes to models--whether they be the result of a socket call, an AJAX request, even a cURL request from the command line--will cause the client to receive a notification.  Continuing with the above example, if you were to open up a new browser window and go to the following URL:</p>
<pre><code>/user/create?name=joe
</code></pre><p>You would see something like the following in the console of the first window:</p>
<pre><code data-language="javascript">{
    data: {
        createdAt: &quot;2014-08-01T05:50:19.855Z&quot;
        id: 1
        name: &quot;joe&quot;
        updatedAt: &quot;2014-08-01T05:50:19.855Z&quot;
    },
    id: 1,
    verb: &quot;created&quot;
}
</code></pre><!-- __LANG=%%__ -->
<p>The <code>verb</code> indicates the kind of action that occurred.  The <code>id</code> refers to the instance that the action occurred on, and <code>data</code> contains more information about the <code>User</code> that was acted upon.  Each event type sends back slightly different information; see the individual resourceful pubsub method reference documents for more info.</p>
<p><docmeta name="uniqueID" value="resourcefulpubsub293545"></docmeta></p>
<docmeta name="displayName" value="Resourceful PubSub">
</docmeta>