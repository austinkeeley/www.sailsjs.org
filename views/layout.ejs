<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Sails.js | Realtime MVC Framework for Node.js</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <link href='http://fonts.googleapis.com/css?family=Open+Sans:400italic,600' rel='stylesheet' type='text/css'>
    <meta name="description" content="Sails.js makes it easy to build custom, enterprise-grade Node.js apps. It is designed to resemble the MVC architecture from frameworks like Ruby on Rails, but with support for the more modern, data-oriented style of web app development. It's especially good for building realtime features like chat." />
    <meta name="author" content="Mike McNeil, Balderdash, and contributors" />
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <!-- setup for FB automation -->
    <script>(function() {
      var _fbq = window._fbq || (window._fbq = []);
      if (!_fbq.loaded) {
        var fbds = document.createElement('script');
        fbds.async = true;
        fbds.src = '//connect.facebook.net/en_US/fbds.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(fbds, s);
        _fbq.loaded = true;
      }
      _fbq.push(['addPixelId', '600838656713699']);
    })();
    window._fbq = window._fbq || [];
    window._fbq.push(['track', 'PixelInitialized', {}]);
    </script>
    <noscript><img height="1" width="1" alt="" style="display:none" src="https://www.facebook.com/tr?id=600838656713699&amp;ev=PixelInitialized" /></noscript>
  </head>

  <body ng-app="SailsWebsite">
    <div class="header" ng-controller="HeaderCtrl">

      <!--Mobile menu button-->
      <div class="menu"
        ng-click="menuVisible = !menuVisible"
        ng-class="{'menu-open': menuVisible === true}">
       <img class="menu-icon" src="/images/icon_menu.png"/>
      </div>

      <!--Navigation list-->
      <div class="nav-container">
        <div class="branding">
          <a href="/">
            <img class="logo" src="/images/logo_sails.png" alt="Sails" />
          </a>
          <span class="version">v0.11</span>
        </div>
        <ul class="nav" ng-class="{'menu-open': menuVisible === true}" click-outside is-open="menuVisible">
          <li ng-click="menuVisible = false">
            <a class="sails-site"
              ng-class="{current: getIsCurrentPage('get-started')}"
              href="/get-started">Get Started</a>
          </li>
          <li ng-click="menuVisible = false">
            <a class="sails-site"
              ng-class="{current: getIsCurrentPage('features')}"
              href="/features">Features</a>
          </li>
          <li ng-click="menuVisible = false">
            <a class="sails-site"
              ng-class="{current: getIsDocumentationPage()}"
              href="/documentation">Documentation</a>
          </li>
          <li ng-click="menuVisible = false">
            <a class="sails-site"
              ng-class="{current: getIsSupportPage()}"
              href="/support">Support</a>
          </li>
        </ul>
      </div>
    </div>

    <div class="wrap">
      <%- body %>
      <div id="push"></div>
    </div>
    <div class="bottom">
      <div class="sharing-footer clearfix">
        <div class="star">
          <iframe src="http://ghbtns.com/github-btn.html?user=balderdashy&amp;repo=sails&amp;type=watch&amp;count=true"
          allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>
          </div>

          <div>
          <iframe src="//www.facebook.com/plugins/like.php?href=https%3A%2F%2Fwww.facebook.com%2Fsailsjs&amp;width=75&amp;layout=button_count&amp;action=like&amp;show_faces=false&amp;share=false&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:86px; height:21px;" allowTransparency="true"></iframe>
          </div>

          <a href="https://twitter.com/share" class="twitter-share-button" data-text="#sailsjs, the realtime MVC framework for Node.js:" data-url="http://sailsjs.org" data-lang="en"></a>
          <!--<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>-->

          <a href="https://twitter.com/sailsjs" class="twitter-follow-button" data-show-count="false" data-lang="en">Follow @sailsjs</a>

          <a class="small-button" href="/get-started">Get started</a>
      </div>
    </div>




    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/JSON2.js"></script>
    <script src="/dependencies/angular.js"></script>
    <script src="/dependencies/directive.stopPropagation.js"></script>
    <script src="/dependencies/jquery.js"></script>
    <script src="/dependencies/lodash.js"></script>
    <script src="/dependencies/moment.min.js"></script>
    <script src="/dependencies/rainbow.js"></script>
    <script src="/dependencies/retina.min.js"></script>
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/App.js"></script>
    <script src="/js/controls/FeaturesCtrl.js"></script>
    <script src="/js/controls/GetStartedCtrl.js"></script>
    <script src="/js/controls/HeaderCtrl.js"></script>
    <script src="/js/controls/HomepageCtrl.js"></script>
    <script src="/js/controls/ReferenceCtrl.js"></script>
    <script src="/js/directives/directive.anatomyBoilerplate.js"></script>
    <script src="/js/directives/directive.bubble.js"></script>
    <script src="/js/directives/directive.clickOutside.js"></script>
    <script src="/js/directives/directive.scrollng.js"></script>
    <script src="/js/directives/open-links-to-external-urls-in-new-tab.directive.js"></script>
    <script src="/js/directives/permalink.directive.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
